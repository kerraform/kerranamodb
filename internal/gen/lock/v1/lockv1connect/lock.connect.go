// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lock/v1/lock.proto

package lockv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kerraform/kerranamodb/internal/gen/lock/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LockServiceName is the fully-qualified name of the LockService service.
	LockServiceName = "lock.v1.LockService"
)

// LockServiceClient is a client for the lock.v1.LockService service.
type LockServiceClient interface {
	Lock(context.Context, *connect_go.Request[v1.LockRequest]) (*connect_go.Response[v1.LockResponse], error)
	Unlock(context.Context, *connect_go.Request[v1.UnlockRequest]) (*connect_go.Response[v1.UnlockResponse], error)
	RLock(context.Context, *connect_go.Request[v1.RLockRequest]) (*connect_go.Response[v1.RLockResponse], error)
	RUnlock(context.Context, *connect_go.Request[v1.RUnlockRequest]) (*connect_go.Response[v1.RUnlockResponse], error)
}

// NewLockServiceClient constructs a client for the lock.v1.LockService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLockServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LockServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lockServiceClient{
		lock: connect_go.NewClient[v1.LockRequest, v1.LockResponse](
			httpClient,
			baseURL+"/lock.v1.LockService/Lock",
			opts...,
		),
		unlock: connect_go.NewClient[v1.UnlockRequest, v1.UnlockResponse](
			httpClient,
			baseURL+"/lock.v1.LockService/Unlock",
			opts...,
		),
		rLock: connect_go.NewClient[v1.RLockRequest, v1.RLockResponse](
			httpClient,
			baseURL+"/lock.v1.LockService/RLock",
			opts...,
		),
		rUnlock: connect_go.NewClient[v1.RUnlockRequest, v1.RUnlockResponse](
			httpClient,
			baseURL+"/lock.v1.LockService/RUnlock",
			opts...,
		),
	}
}

// lockServiceClient implements LockServiceClient.
type lockServiceClient struct {
	lock    *connect_go.Client[v1.LockRequest, v1.LockResponse]
	unlock  *connect_go.Client[v1.UnlockRequest, v1.UnlockResponse]
	rLock   *connect_go.Client[v1.RLockRequest, v1.RLockResponse]
	rUnlock *connect_go.Client[v1.RUnlockRequest, v1.RUnlockResponse]
}

// Lock calls lock.v1.LockService.Lock.
func (c *lockServiceClient) Lock(ctx context.Context, req *connect_go.Request[v1.LockRequest]) (*connect_go.Response[v1.LockResponse], error) {
	return c.lock.CallUnary(ctx, req)
}

// Unlock calls lock.v1.LockService.Unlock.
func (c *lockServiceClient) Unlock(ctx context.Context, req *connect_go.Request[v1.UnlockRequest]) (*connect_go.Response[v1.UnlockResponse], error) {
	return c.unlock.CallUnary(ctx, req)
}

// RLock calls lock.v1.LockService.RLock.
func (c *lockServiceClient) RLock(ctx context.Context, req *connect_go.Request[v1.RLockRequest]) (*connect_go.Response[v1.RLockResponse], error) {
	return c.rLock.CallUnary(ctx, req)
}

// RUnlock calls lock.v1.LockService.RUnlock.
func (c *lockServiceClient) RUnlock(ctx context.Context, req *connect_go.Request[v1.RUnlockRequest]) (*connect_go.Response[v1.RUnlockResponse], error) {
	return c.rUnlock.CallUnary(ctx, req)
}

// LockServiceHandler is an implementation of the lock.v1.LockService service.
type LockServiceHandler interface {
	Lock(context.Context, *connect_go.Request[v1.LockRequest]) (*connect_go.Response[v1.LockResponse], error)
	Unlock(context.Context, *connect_go.Request[v1.UnlockRequest]) (*connect_go.Response[v1.UnlockResponse], error)
	RLock(context.Context, *connect_go.Request[v1.RLockRequest]) (*connect_go.Response[v1.RLockResponse], error)
	RUnlock(context.Context, *connect_go.Request[v1.RUnlockRequest]) (*connect_go.Response[v1.RUnlockResponse], error)
}

// NewLockServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLockServiceHandler(svc LockServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/lock.v1.LockService/Lock", connect_go.NewUnaryHandler(
		"/lock.v1.LockService/Lock",
		svc.Lock,
		opts...,
	))
	mux.Handle("/lock.v1.LockService/Unlock", connect_go.NewUnaryHandler(
		"/lock.v1.LockService/Unlock",
		svc.Unlock,
		opts...,
	))
	mux.Handle("/lock.v1.LockService/RLock", connect_go.NewUnaryHandler(
		"/lock.v1.LockService/RLock",
		svc.RLock,
		opts...,
	))
	mux.Handle("/lock.v1.LockService/RUnlock", connect_go.NewUnaryHandler(
		"/lock.v1.LockService/RUnlock",
		svc.RUnlock,
		opts...,
	))
	return "/lock.v1.LockService/", mux
}

// UnimplementedLockServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLockServiceHandler struct{}

func (UnimplementedLockServiceHandler) Lock(context.Context, *connect_go.Request[v1.LockRequest]) (*connect_go.Response[v1.LockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lock.v1.LockService.Lock is not implemented"))
}

func (UnimplementedLockServiceHandler) Unlock(context.Context, *connect_go.Request[v1.UnlockRequest]) (*connect_go.Response[v1.UnlockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lock.v1.LockService.Unlock is not implemented"))
}

func (UnimplementedLockServiceHandler) RLock(context.Context, *connect_go.Request[v1.RLockRequest]) (*connect_go.Response[v1.RLockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lock.v1.LockService.RLock is not implemented"))
}

func (UnimplementedLockServiceHandler) RUnlock(context.Context, *connect_go.Request[v1.RUnlockRequest]) (*connect_go.Response[v1.RUnlockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lock.v1.LockService.RUnlock is not implemented"))
}
